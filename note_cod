// "use strict";

// alert('hello');

// const result = confirm("Are you here?");
// console.log(result); 

// const answer = +prompt("Вам есть 18?", "18");
// console.log(answer+5); 

// const answers = [];
// answers[0] = prompt('Как ваше имя?', '');
// answers[1] = prompt('Как ваша фамилия?', '');
// answers[2] = prompt('Сколько вам лет?', '');
// console.log(typeof(answers));

// const category = 'toys';
// console.log(`https://someurl.com/${category}/5`);

// const user = "Oleg";
// alert(`Привет, ${user}`);

// let incr =10,
//     decr =10;

// incr++;
// decr--;

// console.log(++incr);
// console.log(--decr);

// const isChecked = true,
//     isClose = false;
// console.log(!isChecked || isClose);

012
/* Задание на урок: практика 1

1) Создать переменную numberOfFilms и в неё поместить ответ от пользователя на вопрос:
'Сколько фильмов вы уже посмотрели?'

2) Создать объект personalMovieDB и в него поместить такие свойства:
    - count - сюда передается ответ на первый вопрос
    - movies - в это свойство поместить пустой объект
    - actors - тоже поместить пустой объект
    - genres - сюда поместить пустой массив
    - privat - в это свойство поместить boolean(логическое) значение false

3) Задайте пользователю по два раза вопросы:
    - 'Один из последних просмотренных фильмов?'
    - 'На сколько оцените его?'
Ответы стоит поместить в отдельные переменные
Записать ответы в объект movies в формате: 
    movies: {
        'logan': '8.1'
    }

Проверить, чтобы все работало без ошибок в консоли */

'use strict';

const numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');

const personalMovieDB = {
    count: numberOfFilms,
    movies: {},
    actors: {},
    genres: [],
    privat: false
};

const a = prompt('Один из последних просмотренных фильмов?', ''),
    b = prompt('На сколько оцените его?', ''),
    c = prompt('Один из последних просмотренных фильмов?', ''),
    d = prompt('На сколько оцените его?', '');

personalMovieDB.movies[a] = b;
personalMovieDB.movies[c] = d;

console.log(personalMovieDB);

Конец урока практика 1

013 условие
'use strict';

if (0) {
    console.log('ok');
} else {
    console.log('Error');
}

const num = 50;

// if (num < 49) {
//     console.log('Error');
// } else if (num > 100) {
//     console.log('Много');
// } else {
//     console.log('Ok');
// }

(num === 50) ? console.log('ok') : console.log('Error');


const num = 51;
switch (num) {
    case 49:
        console.log('неверно');
        break;
    case 100:
        console.log('неверно');
        break;
    case 50:
        console.log('в точку');
        break;
    default: 
        console.log('не в этот раз');
        break;
}

014 циклы их всего 3 вида
'use strict';

let num = 50;
// while (num < 55) {
//     console.log(num);
//     num++;
// }

// do {
//     console.log(num);
//     num++;
// }
// while (num < 55);

for (let i = 1; i < 10; i++) {
    if (i===6) {
        // break;
        continue;
    }
    console.log(i);
}

015 Практика ч2 применяем условия и циклы
'use strict';

// Код возьмите из предыдущего домашнего задания

const numberOfFilms = prompt('Сколько фильмов вы уже посмотрели?', '');

const personalMovieDB = {
    count: numberOfFilms,
    movies: {},
    actors: {},
    genres: [],
    privat: false
};

for (let i = 0; i < 2; i++) {
    const a = prompt('Один из последних просмотренных фильмов?', ''),
          b = prompt('На сколько оцените его?', '');

    if (a !=null && b !=null && a !='' && b !='' && a.length < 50) {
        personalMovieDB.movies[a] = b;
        console.log('Good');
    } else {
        console.log('Error');
        i--;
    }
}

if (personalMovieDB.count < 10) {
    alert('Просмотрено довольно мало фильмов');
} else if (personalMovieDB.count >= 10 && personalMovieDB.count < 30) {
    alert('Вы классический зритель');
} else if (personalMovieDB.count >= 30) {
    alert('Вы киноман');
} else {
    alert('Error');
}

console.log(personalMovieDB);

016 Функции
'use strict';

let num = 20;

function showFirstMessage(text) {
    console.log(text);
    let num = 10;
    console.log(num);
}

showFirstMessage('Good day');
console.log(num);

// console.log(calc(4, 3));
// console.log(calc(5, 3));
// console.log(calc(6, 3));
// function calc(a, b) {
//     return (a+b);
// }

function ret() {
    let num = 50;

    return num;
}
const anotherNum = ret();
console.log(anotherNum);

const logger = function() {
    console.log('H/i');
};
logger();

const calc = (a, b) => {return a + b};

017  Методы и свойства строк и чисел

const str  = "test";
console.log(str.toLowerCase());
console.log(str);

const fruit = "Some fruit";
console.log(fruit.indexOf("q"));

const logg = "My cod";
console.log(logg.slice(3, 7)); 
// // Берет все между, если указать только первый аргумент то вырежет все до конца
console.log(logg.substring(3, 7)); тоже самое
console.log(logg.substr(3, 3)); второй аргумент сколько символов вырезать

const num = 12.2;
console.log(Math.round(num));

const test = "12.2px";
console.log(parseInt(test));
console.log(parseFloat(test));

// 019 callback опция у функции
// function first () {
//     setTimeout(function() {
//         console.log(1);
//     }, 500);
// }

// function second() {
//     console.log(2);
// }

// first();
// second();

// function learnJS(lang, callback) {
//     console.log(`Я учу ${lang}`);
//     callback();
// }
// learnJS('JavaScript', function() {
//     console.log('я прошел этот урок');
// });

// 020 Деструктуризация объектов, работа внутри объекта
// const options = {
//     name: 'test',
//     width: 1024,
//     height: 1024,
//     color: {
//         border: 'black',
//         bg: 'red'
//     },
//     makeTest: function() {
//         console.log("test");
//     }
// };
// // Запускаем метод объекта
// options.makeTest();

// // Деструктуризация объекта
// const { border, bg } = options.color;
// console.log(border);

// console.log(Object.keys(options).length);

// console.log(options.name);
// console.log(options["color"]["bg"]);
// delete options.name;
// console.log(options);

// let counter = 0;
// // Способ перебора объекта for in
// for (let key in options) {
//     if (typeof(options[key]) === 'object') {
//         for (let i in options[key]) {
//             console.log(`Свойство ${i} имеет значение ${options[key][i]}`)
//             counter++;
//         }
//     } else {
//         console.log(`Свойство ${key} имеет значение ${options[key]}`)
//         counter++;
//     }
// };
// console.log(counter);

// 021 Массивы, метод перебора массива и сортировки данных
// const arr = [3, 17, 36, 6, 8];

// arr.sort(compareNum);
// console.log(arr);
// function compareNum(a, b) {
//     return a-b; 
// };

// arr[99] = 0;
// console.log(arr.length);
// console.log(arr);

// Перебираем массив и все его элементы выводим в порядке индекс-значение-весь
// массив, ввиде строк
// arr.forEach(function(item, i, arr) {
//     console.log(`${i}: ${item} внутри массива ${arr}`);
// });

// arr.pop();
// arr.push(10);
// console.log(arr);

// for (let i=0; i<arr.length; i++) {
//     console.log(arr[i]);
// }

// for (let value of arr) {
//     console.log(value);
// }

// const str = prompt("", "");
// // Создал массив из полученных данных
// const products = str.split(", ");
// // отобразить массив из полученных данных ввиде строки с разделителем '; '
// products.sort();
// console.log(products.join('; '));

// 022 копирование по ссылке и по значению поверхностое
// // let a = 5,
// //     b = a;
// // b = b + 5;
// // console.log(b);
// // console.log(a);

// // const obj = {
// //     a: 5,
// //     b: 1
// // };

// // const copy = obj; //Не копируетт значения а привязывает ссылку к объекту

// // copy.a = 10; //изменит данные не только copy а и основного obj
// // console.log(copy);
// // console.log(obj);

// function copy(mainObj) {
//     let objCopy = {};

//     let key;
//     for (key in mainObj) {
//         objCopy[key] = mainObj[key];
//     }
//     return objCopy;
// };

// const numbers = {
//     a: 2,
//     b: 5,
//     c: {
//         x: 7,
//         y: 4 
//     }
// };
// const newNumbers = copy(numbers);
// newNumbers.a = 10;
// newNumbers.c.x = 10;

// // console.log(newNumbers);
// // console.log(numbers);

// const add =  {
//     d: 17,
//     e: 20
// };
// const Clone = Object.assign({}, add);
// Clone.d = 20;

// console.log(add);
// console.log(Clone); //в клоне лежит поверхностная копия главного объекта

// //у массива есть для этого свой метод slice
// const oldArray = ['a', 'b', 'c'];
// const newArray = oldArray.slice();
// newArray[1] = 'asdasd'; 
// console.log(newArray);
// console.log(oldArray);

// //Оператор разворота данных '...' Spread оператор
// const video = ['youtube', 'vimeo', 'rutube'],
//       blogs = ['wordpress', 'livejornal', 'blogger'],
//       internet = [...video, ...blogs, 'vk', 'faceBOOK'];

// console.log(internet);

// function log(a, b, c) {
//     console.log(a);
//     console.log(b);
//     console.log(c);
// }
// const num = [2, 5, 7];
// log(...num);

// //поверхностная копия при помощи спред оператора
// const A = ["a", "b"];
// const newA = [...A];
// newA[1] = "asdddf"
// console.log(A);
// console.log(newA);

// 023 ООП прототипно ориентированное наследование
// console.dir([1,2,3]); // в браузере можно проследить прототипное наследование
// методов массива и объекта

const soldier = {
    health: 400,
    armor: 100,
    sayHello: function() {
        console.log("Hello");
    }
};

const alex = Object.create(soldier);
console.log(alex.armor);

// текущее добавление прототипа к объеку
const jonh = {
    health: 100
};
Object.setPrototypeOf(jonh, soldier);
jonh.sayHello();

// 026 Динамическая типизация данных, преобразование данных.
унарный + преобразование строки в число
Все данные получаемые от пользователя из баузера всегда будут строкой
0, '', null, underfind, NaN; - всегда будет являтся - false
!!"111" - превращает в boolean
'4' -превращает число в строку

// 027
оператор && всегда запинается на false и возвращает последнее значение
оператор || всегда запинается на true и возвращает true значение
Обращать внимание на последовательность выполнения операторов
Приоритет && выше чем у ||

028 Получение элементов со страницы DOM
'use strict';
// получение элементов и html по id и по tag
const box = document.getElementById('box');

console.log(box);

const btns = document.getElementsByTagName('button');

console.log(btns[1]);

const circles = document.getElementsByClassName('circle');

console.log(circles);
// получение элементов по любому css селектору, требуется обозначение селектора
// обозначение классов . обозначение id #
const hearts = document.querySelectorAll('.heart');

console.log(hearts[1]);

hearts.forEach(item => {
    console.log(item);
})

const oneHeart = document.querySelector('.heart');
console.log(oneHeart);
// выведет в консоль первый элемент на странице удовлетворяющий условие

029 Действия с элементами на странице
'use strict';
const box = document.getElementById('box'),
      btns = document.getElementsByTagName('button'),
      circles = document.getElementsByClassName('circle'),
      wrapper = document.querySelector('.wrapper'),
      hearts = wrapper.querySelectorAll('.heart'),
      oneHeart = wrapper.querySelector('.heart');

// Работаем с инлайн стилями, их приоритет выше чем у css стилей 
// box.style.backgroundColor = 'blue';
// box.style.width = '500px';
btns[2].style.borderRadius = '100%';

// Задаем несколько свойств для одного элемента
// если записать через бэктики можно одним из параметров присвоить переменную
// box.style.cssText = `background-color: green; width: ${num}`;

// Задаем параметр всем элементам псевдомассива

// for (let i = 0; i < hearts.length; i++) {
//     hearts[i].style.backgroundColor = 'green';
// }

hearts.forEach(anyname => {
    anyname.style.backgroundColor = 'green';
});

// Создаем div который находится только внутри js к html отношения не имемет.
const div = document.createElement('div');
// const text = document.createTextNode('Тут был я');
div.classList.add('black');
// Добавляем новый div в конец body, добавлять можно относительно конкретного элемента а не массива
// document.body.append(div);

// Можно не получать какойто элемент как переменную а сразу добавлять div
document.querySelector('.wrapper').append(div);

wrapper.prepend(div); // последнее действие перебивает предидущее а не выполняет оба

hearts[0].after(div); // можно использовать также метод before

// circles[0].remove(); // удалил первый кружок

hearts[0].replaceWith(circles[0]); // Заменил первое сердечко первм кружочком

// Вставляем содержимое  div
div.innerHTML = "<h1>New block</h1>";

// div.textContent = "Content"; // вставка только текста

// Вставка html блока относительно другого элемена
div.insertAdjacentHTML("afterend", '<h2>Hello</h2>');

030
/* Задания на урок:

1) Удалить все рекламные блоки со страницы (правая часть сайта)

2) Изменить жанр фильма, поменять "комедия" на "драма"

3) Изменить задний фон постера с фильмом на изображение "bg.jpg". Оно лежит в папке img.
Реализовать только при помощи JS

4) Список фильмов на странице сформировать на основании данных из этого JS файла.
Отсортировать их по алфавиту 

5) Добавить нумерацию выведенных фильмов */

'use strict';

const movieDB = {
    movies: [
        "Логан",
        "Лига справедливости",
        "Ла-ла лэнд",
        "Одержимость",
        "Скотт Пилигрим против..."
    ]
};



const promo__advImg = document.querySelectorAll('.promo__adv img'),
      promo__bg = document.querySelector('.promo__bg'),
      promo__genre = promo__bg.querySelector('.promo__genre'),
      promo__interactiveList = document.querySelector('.promo__interactive-list');
      


// 1
// const img = document.getElementsByTagName('img');
// // console.log(img);
// img[1].remove();
// img[1].remove();
// img[1].remove();

promo__advImg.forEach(item => {
    item.remove();
});

// 2
// const promo__genre = document.querySelector('.promo__genre');
// const newPromo__genre = document.createElement('newPromo__genre');
// newPromo__genre.classList.add('promo__genre');
// newPromo__genre.innerHTML = "<div>ДРАМА</div>";
// promo__genre.replaceWith(newPromo__genre);

promo__genre.textContent = "ДРАМА";

// 3
// const promo__bg = document.querySelector('.promo__bg');
// console.log('promo__bg');

// const newPromo__bg = document.createElement('newPromo__bg');
// newPromo__bg.src = "url('../img/bg.jpg')";
// console.log(newPromo__bg);


// promo__bg.style.background = `${newPromo__bg} center (center / cover) no-repeat`;
// url('../img/mars.webp') center (center / cover) no-repeat;

promo__bg.style.backgroundImage = 'url("img/bg.jpg")';
// Если использовать дважды одинаковые кавычки будет синтаксическая ошибка => любые но разные
// js по умолчанию работает в html странице поть указывать из html

// 4, 5

// сперва необхоимо очистить содержимое блока
promo__interactiveList.innerHTML = "";

// сортируем фильма по названию
movieDB.movies.sort();

movieDB.movies.forEach((film, i) => {
    promo__interactiveList.innerHTML += `
        <li class="promo__interactive-item">${i + 1} ${film}
            <div class="delete"></div>
        </li>
    `;
});

031 обработчики событий
const btns = document.querySelectorAll('button'),
      overlay = document.querySelector('.overlay');


      // btn.onclick  = function() {
//     alert("Onclick");
// };

// btn.addEventListener('click', () => {
//     alert("Click");
// });

let i = 0;
const deleteElement = (event) => {
    // event.target.remove();
    console.log(event.currentTarget);
    console.log(event.type);
    i++;
    if (i == 1) {
        btn.removeEventListener('click', deleteElement);
    }
};

// btn.addEventListener('click', deleteElement);
// overlay.addEventListener('click', deleteElement);

// первый аргумент - тип события, обработчик функция, опции(свойства объекта)
btns.forEach(btn => {
    btn.addEventListener('click', deleteElement, {once: true});
});

// const link = document.querySelector('a');

// link.addEventListener('click', function(event) {
//     event.preventDefault(); // отменяет стандартное поведение браузера с ссылкой

//     console.log(event.target);
// });